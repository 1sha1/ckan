#
# ckan - Pylons configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = False
email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[uwsgi]
socket = /tmp/i_am_a_unix_socket.sock
master = true
processes = 1

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(http_port)s

[app:main]
use = egg:ckan
full_stack = true
#cache_dir = %(here)s/data
beaker.session.key = ckan
beaker.session.secret = g/MmDUp7QY8qs+NiXO+uEI+XF
beaker.session.type = memory
app_instance_uuid = {53773eb8-7d0a-428e-b31d-ca1f07b873d7}

tests_fast_repo_delete_hack = true

ckan.site_logo = /images/logo.png
ckan.site_title = Open Data Portal
ckan.site_description = The EU Open Data Hub

ckan.simple_search = true



# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = true

# Specify the database for SQLAlchemy to use via
#sqlalchemy.url = sqlite:///%(here)s/somedb.db
#sqlalchemy.url = postgres://david:ytrewq@localhost/ckanupgrade
#sqlalchemy.url = postgres://david:ytrewq@localhost/ckan.net
#sqlalchemy.url = postgres://david:ytrewq@localhost/thedatahub
sqlalchemy.url = postgres://david:ytrewq@localhost/ckantest
#sqlalchemy.url = postgres://david:ytrewq@localhost/ckan.net
#sqlalchemy.url = postgres://david:ytrewq@localhost/datacat
#drupal.db_url = postgres://david:ytrewq@localhost/drupal
#drupal.db_url = postgres://david:ytrewq@localhost/drupalckan
#drupal.db_url = mysql://david:password@localhost/drupal
#drupal.base_url = http://0.0.0.0/ckan-drupal/drupal/
#sqlalchemy.url = sqlite://
#sqlalchemy.echo = true

# repoze.who config
who.config_file = %(here)s/who.ini
who.log_level = ERROR
who.log_file = who_log.ini

# CKAN auth configuration (TODO: rename to ckan.auth or similar ...)
# space separated list ...
auth.admins = 

#ckan.extra_resource_fields = alt_url size moo
# CKAN caching 
#cache_enabled = False
# cache to persistent files
#beaker.cache.type = memory
# default expiry time for the cache (where not specified specifically)
#ckan.cache.default_expires = 100000
# cache expiry settings for specific controllers
# by default these are disabled, enable as needed to a time in seconds
#ckan.controllers.expires = 1000001
#ckan.controllers.home.expires = 1000001
#ckan.controllers.package.list.expires = 1000001
#ckan.controllers.tag.read.expires = 1000001
#ckan.controllers.apiv1.package.list.expires = 1000001
#ckan.controllers.apiv1.package.show.expires = 1000001
#ckan.controllers.apiv2.package.list.expires = 1000001
#ckan.controllers.apiv2.package.show.expires = 1000001
#enable_caching = False
#beaker.cache.type = file
#ckan.controllers.package.list.expires = 1800
#ckan.controllers.package.read.expires = 1
#ckan.controllers.tag.read.expires = 900
#ckan.controllers.apiv1.package.list.expires = 900
#ckan.controllers.apiv1.package.show.expires = 60
#ckan.controllers.apiv2.package.list.expires = 900
#ckan.controllers.apiv2.package.show.expires = 60


# CKAN QoS monitoring
# any non-empty value enables it
enable_call_timing =

# Location of RDF versions of packages
# e.g. rdf_packages = http://semantic.ckan.net/package/
rdf_packages =

# Location of licenses group (defaults to local Python licenses package)
#licenses_group_url = http://licenses.opendefinition.org/2.0/ckan_original

# Package form to use
#package_form = standard
#package_form = aiti
#package_form = iati_package
#group_form = iati_group

# Hide certain extras fields from package read form:
# package_hide_extras = for_search_index_only

# API configuration
#apikey_header_name = X-CKAN-API-Key

# Changeset configuration
#changeset.auto_commit = true
#changeset.sources = http://www.ckan.net/,

# Guide location
#guide_url = http://wiki.okfn.org/ckan/doc/

## extra places to look for templates and public files (comma separated lists)
## any templates/files found will override correspondingly named ones in
## ckan/templates/ and ckan/public
## (e.g. to override main layout template layout.html or add in css/extra.css)
# extra_template_paths = %(here)s/my-templates
# extra_public_paths = %(here)s/my-public

# Package form integration
#package_edit_return_url = http://another.frontend/package/<NAME>
#package_new_return_url = http://another.frontend/package/<NAME>


# Turn on messaging with carrot, default to false
#ckan.async_notifier = true
# Messaging module used by carrot:
# * pyamqplib - AMQP (e.g. for RabbitMQ)
# * queue - native Python Queue (debugging and tests only)
#carrot_messaging_library = pyamqplib

## Update the search index synchronously (i.e. in-process rather than
## out-of-process as would be case if using AMQP framework)
## Set to false to disable, true to enable
## Default enabled (and enabled if option entirely absent)
## NOTE this is mutually exclusive with ckan.async_notifier
ckan.build_search_index_synchronously = true

#ckan.extra_resource_fields = alt_url size

#search_backend = solr
#solr_url = http://localhost:8983/solr

ckan.plugins =

#datahub
#multilingual_dataset 
#datastorer
#example_datasetform example

#archiver

#gemini_harvester harvest 
  
#gemini_harvester
#admin moderatededits
#ckan.site_url = http://0.0.0.0:8088


#ckanext.storage.max_content_length = 1000000000
#ofs.impl = pairtree
#ofs.storage_dir = /tmp


ckan.site_id = test_ckan
# Enable if the API is at a different domain
# ckan.api_url = http://www.ckan.net
#ckan.locale_default = en
#ckan.locales_offered = en de


#ckan.default_roles.Package = {"visitor": ["reader"], "logged_in": ["reader"]}
ckan.datastore.enabled = True

[app:celery]
#BROKER_BACKEND = sqlalchemy
#BROKER_HOST = postgres://david:ytrewq@localhost/ckan.net

#CELERY_RESULT_DBURI = postgres://david:ytrewq@localhost/ckan.net
#CELERY_RESULT_BACKEND = database
#CELERY_RESULT_SERIALIZER = json
#CELERY_TASK_SERIALIZER = json
#CELERY_IMPORTS = ckanext.archiver.tasks ckanext.webstorer.tasks

CELERYD_CONCURRENCY=1

[loggers]
keys = root

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = ERROR 
handlers = console

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = ERROR 
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
